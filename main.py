
import cvxpy as cp
import numpy as np

if __name__ == '__main__':
    # 12 vars x_ij = 1 iff vertex i has color j
    # 3 vars y_i = 1 iff at color i is used

    # the graph:
    # 1-2-3
    #   |/
    #   4


    # minimize the sum of y_i
    # subject to:
    # 1. the sums x_i1 + x_i2 + x_i3 = 1
    # 2. the sums x_1j + x_2j <= 1 etc.
    # 3. x_ij <= c_j

    x = cp.Variable(shape=(4 * 3), name='x', boolean=True)
    c = cp.Variable(shape=3, name='c', boolean=True)

    A1 = np.array([
        [1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.]
        ])

    A2 = np.array([
        [1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.],
        [0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.],
        [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.]
    ])

    A3 = np.array([
        [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.]
    ])

    A4 = np.array([
        [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.]
    ])

    A5 = np.array([
        [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.]
    ])

    A6 = np.array([
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]
    ])

    B1 = np.array([
        [1], [1], [1], [1]
    ])

    B2 = np.array([
        [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1]
    ])

    constrains = [cp.matmul(A1, x) <= B1, cp.matmul(A2, x) <= B2, cp.matmul(A3, x) <= c, cp.matmul(A4, x) <= c,
                  cp.matmul(A5, x) <= c, cp.matmul(A6, x) <= c, x >= 0, c >= 0]
    objective = cp.Maximize(cp.sum(c,axis=0))
    problem = cp.Problem(objective, constrains)
    solution = problem.solve()
